#!/bin/bash

# determine os
function getOs () {
  lowercase(){
      echo "$1" | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"
  }

  OS=`lowercase \`uname\``
  KERNEL=`uname -r`
  MACH=`uname -m`

  if [ "{$OS}" == "windowsnt" ]; then
      OS=windows
  elif [ "{$OS}" == "darwin" ]; then
      OS=mac
  else
      OS=`uname`
      if [ "${OS}" = "SunOS" ] ; then
          OS=Solaris
          ARCH=`uname -p`
          OSSTR="${OS} ${REV}(${ARCH} `uname -v`)"
      elif [ "${OS}" = "AIX" ] ; then
          OSSTR="${OS} `oslevel` (`oslevel -r`)"
      elif [ "${OS}" = "Linux" ] ; then
          if [ -f /etc/redhat-release ] ; then
              DistroBasedOn='RedHat'
              DIST=`cat /etc/redhat-release |sed s/\ release.*//`
              PSUEDONAME=`cat /etc/redhat-release | sed s/.*\(// | sed s/\)//`
              REV=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
          elif [ -f /etc/SuSE-release ] ; then
              DistroBasedOn='SuSe'
              PSUEDONAME=`cat /etc/SuSE-release | tr "\n" ' '| sed s/VERSION.*//`
              REV=`cat /etc/SuSE-release | tr "\n" ' ' | sed s/.*=\ //`
          elif [ -f /etc/mandrake-release ] ; then
              DistroBasedOn='Mandrake'
              PSUEDONAME=`cat /etc/mandrake-release | sed s/.*\(// | sed s/\)//`
              REV=`cat /etc/mandrake-release | sed s/.*release\ // | sed s/\ .*//`
          elif [ -f /etc/debian_version ] ; then
              DistroBasedOn='Debian'
              DIST=`cat /etc/lsb-release | grep '^DISTRIB_ID' | awk -F=  '{ print $2 }'`
              PSUEDONAME=`cat /etc/lsb-release | grep '^DISTRIB_CODENAME' | awk -F=  '{ print $2 }'`
              REV=`cat /etc/lsb-release | grep '^DISTRIB_RELEASE' | awk -F=  '{ print $2 }'`
          fi
          if [ -f /etc/UnitedLinux-release ] ; then
              DIST="${DIST}[`cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//`]"
          fi
          OS=`lowercase $OS`
          DistroBasedOn=`lowercase $DistroBasedOn`
          readonly OS
          readonly DIST
          readonly DistroBasedOn
          readonly PSUEDONAME
          readonly REV
          readonly KERNEL
          readonly MACH
      fi
  fi
}

getOs

# backup zshrc
if [ -s ~/.zshrc ]; then
  cp -i ~/.zshrc ~/.zshrc.bak
fi

# backup vimrc
if [ -s ~/.vimrc ]; then
  cp -i ~/.vimrc ~/.vimrc.bak
fi

# Install oh-my-zsh
sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"

# Setup zsh plugins
mkdir -p ~/.zsh-plugins
git clone https://github.com/zsh-users/zsh-history-substring-search.git ~/.zsh-plugins/zsh-history-substring-search
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting
cp -i .zshrc ~/.zshrc

# haskell-vim-now actually does a ton of stuff, including making vim a Haskell IDE... So just use it :3
if [ "$OS" = "Darwin" ]; then
  brew install ghc cabal-install haskell-stack
fi
bash <(curl -sL https://git.io/haskell-vim-now)

# copy new vimrc, create backup areas
cp -i .vimrc ~/
mkdir -p ~/.vim/tmp
mkdir -p ~/.vim/backup

echo "In vim, run :PlugInstall to complete installation."
echo "If you want a different iTerm2 color scheme, go here:"
echo "https://github.com/mbadolato/iTerm2-Color-Schemes"
echo "I like chalk."
echo "If you want a new typeface, try Input Mono."
echo "http://input.fontbureau.com/"
echo "Finally, restart your terminal to use the zsh configuration."
echo "Enjoy!"
